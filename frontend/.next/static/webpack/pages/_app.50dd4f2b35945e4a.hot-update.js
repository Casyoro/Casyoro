"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./lib/api.js":
/*!********************!*\
  !*** ./lib/api.js ***!
  \********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adminAPI: function() { return /* binding */ adminAPI; },\n/* harmony export */   authAPI: function() { return /* binding */ authAPI; },\n/* harmony export */   clearTokens: function() { return /* binding */ clearTokens; },\n/* harmony export */   getAuthHeader: function() { return /* binding */ getAuthHeader; },\n/* harmony export */   getTokens: function() { return /* binding */ getTokens; },\n/* harmony export */   isAuthenticated: function() { return /* binding */ isAuthenticated; },\n/* harmony export */   offersAPI: function() { return /* binding */ offersAPI; },\n/* harmony export */   paymentAPI: function() { return /* binding */ paymentAPI; },\n/* harmony export */   promoterAPI: function() { return /* binding */ promoterAPI; },\n/* harmony export */   publisherAPI: function() { return /* binding */ publisherAPI; },\n/* harmony export */   setTokens: function() { return /* binding */ setTokens; },\n/* harmony export */   userAPI: function() { return /* binding */ userAPI; },\n/* harmony export */   walletAPI: function() { return /* binding */ walletAPI; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var js_cookie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-cookie */ \"./node_modules/js-cookie/dist/js.cookie.mjs\");\n/* harmony import */ var react_hot_toast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-hot-toast */ \"./node_modules/react-hot-toast/dist/index.mjs\");\n/* harmony import */ var _mockAPI__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mockAPI */ \"./lib/mockAPI.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\n\n\n\n// Create axios instance\nconst api = axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].create({\n    baseURL: \"http://localhost:5000/api\",\n    timeout: 30000,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n});\n// Token management\nconst getTokens = ()=>{\n    return {\n        accessToken: js_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"accessToken\"),\n        refreshToken: js_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"refreshToken\")\n    };\n};\nconst setTokens = (accessToken, refreshToken)=>{\n    if (accessToken) {\n        js_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].set(\"accessToken\", accessToken, {\n            expires: 7\n        }); // 7 days\n    }\n    if (refreshToken) {\n        js_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].set(\"refreshToken\", refreshToken, {\n            expires: 30\n        }); // 30 days\n    }\n};\nconst clearTokens = ()=>{\n    js_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].remove(\"accessToken\");\n    js_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].remove(\"refreshToken\");\n};\n// Request interceptor to add auth token\napi.interceptors.request.use((config)=>{\n    const { accessToken } = getTokens();\n    if (accessToken) {\n        config.headers.Authorization = \"Bearer \".concat(accessToken);\n    }\n    return config;\n}, (error)=>{\n    return Promise.reject(error);\n});\n// Response interceptor for token refresh\napi.interceptors.response.use((response)=>response, async (error)=>{\n    var _error_response, _error_response_data, _error_response1;\n    const originalRequest = error.config;\n    if (((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 401 && !originalRequest._retry) {\n        originalRequest._retry = true;\n        try {\n            const { refreshToken } = getTokens();\n            if (!refreshToken) {\n                throw new Error(\"No refresh token available\");\n            }\n            const response = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].post(\"\".concat(\"http://localhost:5000/api\", \"/auth/refresh-token\"), {\n                refreshToken\n            });\n            const { accessToken, refreshToken: newRefreshToken } = response.data.data;\n            setTokens(accessToken, newRefreshToken);\n            // Retry original request\n            originalRequest.headers.Authorization = \"Bearer \".concat(accessToken);\n            return api(originalRequest);\n        } catch (refreshError) {\n            // Refresh failed, redirect to login\n            clearTokens();\n            if (true) {\n                window.location.href = \"/auth/login\";\n            }\n            return Promise.reject(refreshError);\n        }\n    }\n    // Handle other errors\n    if ((_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : (_error_response_data = _error_response1.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) {\n        react_hot_toast__WEBPACK_IMPORTED_MODULE_1__[\"default\"].error(error.response.data.message);\n    } else if (error.message) {\n        react_hot_toast__WEBPACK_IMPORTED_MODULE_1__[\"default\"].error(error.message);\n    }\n    return Promise.reject(error);\n});\n// Import mock API for development\n\n// Check if we should use mock API\nconst USE_MOCK_API =  true && process.env.NEXT_PUBLIC_USE_MOCK_API === \"true\";\n// API functions with fallback to mock\nconst authAPI = {\n    register: async (data)=>{\n        if (USE_MOCK_API) {\n            console.log(\"Using mock API for registration\");\n            return _mockAPI__WEBPACK_IMPORTED_MODULE_3__.mockAuthAPI.register(data);\n        }\n        try {\n            return await api.post(\"/auth/register\", data);\n        } catch (error) {\n            var _error_message;\n            // If backend is not available, suggest using mock API\n            if (error.code === \"ECONNREFUSED\" || ((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes(\"Network Error\"))) {\n                console.error(\"Backend not available. To use mock API, set NEXT_PUBLIC_USE_MOCK_API=true in your environment\");\n            }\n            throw error;\n        }\n    },\n    login: async (data)=>{\n        if (USE_MOCK_API) {\n            console.log(\"Using mock API for login\");\n            return _mockAPI__WEBPACK_IMPORTED_MODULE_3__.mockAuthAPI.login(data);\n        }\n        try {\n            return await api.post(\"/auth/login\", data);\n        } catch (error) {\n            var _error_message;\n            if (error.code === \"ECONNREFUSED\" || ((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes(\"Network Error\"))) {\n                console.error(\"Backend not available. To use mock API, set NEXT_PUBLIC_USE_MOCK_API=true in your environment\");\n            }\n            throw error;\n        }\n    },\n    logout: (refreshToken)=>api.post(\"/auth/logout\", {\n            refreshToken\n        }),\n    refreshToken: (refreshToken)=>api.post(\"/auth/refresh-token\", {\n            refreshToken\n        }),\n    verifyEmail: (token)=>api.post(\"/auth/verify-email\", {\n            token\n        }),\n    resendVerification: (email)=>api.post(\"/auth/resend-verification\", {\n            email\n        }),\n    forgotPassword: (email)=>api.post(\"/auth/forgot-password\", {\n            email\n        }),\n    resetPassword: (data)=>api.post(\"/auth/reset-password\", data),\n    getCurrentUser: ()=>api.get(\"/auth/me\"),\n    setup2FA: ()=>api.post(\"/auth/setup-2fa\"),\n    verify2FA: (code)=>api.post(\"/auth/verify-2fa\", {\n            code\n        }),\n    disable2FA: (data)=>api.post(\"/auth/disable-2fa\", data),\n    oauthGoogle: (data)=>api.post(\"/auth/oauth/google\", data)\n};\nconst userAPI = {\n    getProfile: ()=>api.get(\"/users/profile\"),\n    updateProfile: (data)=>api.put(\"/users/profile\", data),\n    updateAddress: (data)=>api.put(\"/users/address\", data),\n    uploadAvatar: (formData)=>api.post(\"/users/avatar\", formData, {\n            headers: {\n                \"Content-Type\": \"multipart/form-data\"\n            }\n        }),\n    getDashboard: ()=>api.get(\"/users/dashboard\"),\n    getOrders: (params)=>api.get(\"/users/orders\", {\n            params\n        }),\n    linkAccount: (data)=>api.post(\"/users/link-account\", data),\n    unlinkAccount: (platform, accountId)=>api.delete(\"/users/unlink-account/\".concat(platform, \"/\").concat(accountId)),\n    updatePreferences: (data)=>api.put(\"/users/preferences\", data),\n    updateBankDetails: (data)=>api.put(\"/users/bank-details\", data),\n    deleteAccount: (data)=>api.delete(\"/users/account\", {\n            data\n        })\n};\nconst walletAPI = {\n    getWallet: ()=>api.get(\"/wallet\"),\n    getTransactions: (params)=>api.get(\"/wallet/transactions\", {\n            params\n        }),\n    requestWithdrawal: (data)=>api.post(\"/wallet/withdraw\", data),\n    getWithdrawals: (params)=>api.get(\"/wallet/withdrawals\", {\n            params\n        }),\n    addFunds: (data)=>api.post(\"/wallet/add-funds\", data)\n};\nconst offersAPI = {\n    getOffers: (params)=>api.get(\"/offers\", {\n            params\n        }),\n    getOffer: (id)=>api.get(\"/offers/\".concat(id)),\n    getFeaturedOffers: ()=>api.get(\"/offers/featured\"),\n    getOffersByCategory: (category)=>api.get(\"/offers/category/\".concat(category)),\n    trackOfferView: (id)=>api.post(\"/offers/\".concat(id, \"/view\")),\n    trackOfferClick: (id)=>api.post(\"/offers/\".concat(id, \"/click\")),\n    useOffer: (id, data)=>api.post(\"/offers/\".concat(id, \"/use\"), data)\n};\nconst publisherAPI = {\n    apply: (data)=>api.post(\"/publishers/apply\", data),\n    getProfile: ()=>api.get(\"/publishers/profile\"),\n    updateProfile: (data)=>api.put(\"/publishers/profile\", data),\n    getDashboard: ()=>api.get(\"/publishers/dashboard\"),\n    getAds: (params)=>api.get(\"/publishers/ads\", {\n            params\n        }),\n    createAd: (data)=>api.post(\"/publishers/ads\", data),\n    updateAd: (id, data)=>api.put(\"/publishers/ads/\".concat(id), data),\n    updateAdStatus: (id, data)=>api.patch(\"/publishers/ads/\".concat(id, \"/status\"), data),\n    deleteAd: (id)=>api.delete(\"/publishers/ads/\".concat(id)),\n    getAdMetrics: (id, params)=>api.get(\"/publishers/ads/\".concat(id, \"/metrics\"), {\n            params\n        }),\n    getWallet: ()=>api.get(\"/publishers/wallet\"),\n    topUpWallet: (data)=>api.post(\"/publishers/wallet/topup\", data),\n    getPayments: (params)=>api.get(\"/publishers/payments\", {\n            params\n        })\n};\nconst promoterAPI = {\n    apply: (data)=>api.post(\"/promoters/apply\", data),\n    getProfile: ()=>api.get(\"/promoters/profile\"),\n    updateProfile: (data)=>api.put(\"/promoters/profile\", data),\n    getDashboard: ()=>api.get(\"/promoters/dashboard\"),\n    getAdScripts: (params)=>api.get(\"/promoters/scripts\", {\n            params\n        }),\n    getEarnings: (params)=>api.get(\"/promoters/earnings\", {\n            params\n        }),\n    requestWithdrawal: (data)=>api.post(\"/promoters/withdraw\", data),\n    getWithdrawals: (params)=>api.get(\"/promoters/withdrawals\", {\n            params\n        }),\n    getMetrics: (params)=>api.get(\"/promoters/metrics\", {\n            params\n        })\n};\nconst adminAPI = {\n    getDashboard: ()=>api.get(\"/admin/dashboard\"),\n    getUsers: (params)=>api.get(\"/admin/users\", {\n            params\n        }),\n    updateUser: (id, data)=>api.put(\"/admin/users/\".concat(id), data),\n    getPublishers: (params)=>api.get(\"/admin/publishers\", {\n            params\n        }),\n    verifyPublisher: (id, data)=>api.patch(\"/admin/publishers/\".concat(id, \"/verification\"), data),\n    getPromoters: (params)=>api.get(\"/admin/promoters\", {\n            params\n        }),\n    approvePromoter: (id, data)=>api.patch(\"/admin/promoters/\".concat(id, \"/application\"), data),\n    getOffers: (params)=>api.get(\"/admin/offers\", {\n            params\n        }),\n    createOffer: (data)=>api.post(\"/admin/offers\", data),\n    updateOffer: (id, data)=>api.put(\"/admin/offers/\".concat(id), data),\n    getAds: (params)=>api.get(\"/admin/ads\", {\n            params\n        }),\n    reviewAd: (id, data)=>api.patch(\"/admin/ads/\".concat(id, \"/review\"), data),\n    getTransactions: (params)=>api.get(\"/admin/transactions\", {\n            params\n        }),\n    getWithdrawals: (params)=>api.get(\"/admin/withdrawals\", {\n            params\n        }),\n    processWithdrawal: (promoterId, withdrawalId, data)=>api.patch(\"/admin/withdrawals/\".concat(promoterId, \"/\").concat(withdrawalId), data),\n    getAnalytics: (params)=>api.get(\"/admin/analytics\", {\n            params\n        }),\n    getSettings: ()=>api.get(\"/admin/settings\")\n};\nconst paymentAPI = {\n    createRazorpayOrder: (data)=>api.post(\"/payments/razorpay/create-order\", data),\n    verifyRazorpayPayment: (data)=>api.post(\"/payments/razorpay/verify\", data),\n    getPaymentMethods: ()=>api.get(\"/payments/methods\"),\n    addPaymentMethod: (data)=>api.post(\"/payments/methods\", data),\n    deletePaymentMethod: (id)=>api.delete(\"/payments/methods/\".concat(id))\n};\n// Utility functions\nconst isAuthenticated = ()=>{\n    const { accessToken } = getTokens();\n    return !!accessToken;\n};\nconst getAuthHeader = ()=>{\n    const { accessToken } = getTokens();\n    return accessToken ? {\n        Authorization: \"Bearer \".concat(accessToken)\n    } : {};\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (api);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/api.js\n"));

/***/ }),

/***/ "./lib/mockAPI.js":
/*!************************!*\
  !*** ./lib/mockAPI.js ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkBackendAvailability: function() { return /* binding */ checkBackendAvailability; },\n/* harmony export */   mockAuthAPI: function() { return /* binding */ mockAuthAPI; }\n/* harmony export */ });\n// Mock API for development when backend is not available\nconst mockAuthAPI = {\n    register: async (data)=>{\n        // Simulate API call delay\n        await new Promise((resolve)=>setTimeout(resolve, 1000));\n        // Simulate validation\n        if (!data.email || !data.password) {\n            throw new Error(\"Email and password are required\");\n        }\n        if (data.password.length < 8) {\n            throw new Error(\"Password must be at least 8 characters\");\n        }\n        // Simulate successful registration\n        const mockUser = {\n            id: Date.now(),\n            firstName: data.firstName,\n            lastName: data.lastName,\n            email: data.email,\n            role: data.role || \"user\",\n            isVerified: false,\n            createdAt: new Date().toISOString()\n        };\n        const mockTokens = {\n            accessToken: \"mock_access_token_\" + Date.now(),\n            refreshToken: \"mock_refresh_token_\" + Date.now()\n        };\n        return {\n            data: {\n                success: true,\n                data: {\n                    user: mockUser,\n                    ...mockTokens\n                }\n            }\n        };\n    },\n    login: async (credentials)=>{\n        await new Promise((resolve)=>setTimeout(resolve, 800));\n        if (credentials.email === \"test@example.com\" && credentials.password === \"password123\") {\n            return {\n                data: {\n                    success: true,\n                    data: {\n                        user: {\n                            id: 1,\n                            firstName: \"Test\",\n                            lastName: \"User\",\n                            email: \"test@example.com\",\n                            role: \"user\",\n                            isVerified: true\n                        },\n                        accessToken: \"mock_access_token\",\n                        refreshToken: \"mock_refresh_token\"\n                    }\n                }\n            };\n        } else {\n            throw {\n                response: {\n                    status: 401,\n                    data: {\n                        message: \"Invalid credentials\"\n                    }\n                }\n            };\n        }\n    },\n    getCurrentUser: async ()=>{\n        await new Promise((resolve)=>setTimeout(resolve, 300));\n        return {\n            data: {\n                success: true,\n                data: {\n                    user: {\n                        id: 1,\n                        firstName: \"Test\",\n                        lastName: \"User\",\n                        email: \"test@example.com\",\n                        role: \"user\",\n                        isVerified: true\n                    }\n                }\n            }\n        };\n    }\n};\n// Check if backend is available\nconst checkBackendAvailability = async ()=>{\n    try {\n        const response = await fetch(\"http://localhost:5000/api/health\", {\n            method: \"GET\",\n            timeout: 3000\n        });\n        return response.ok;\n    } catch (error) {\n        return false;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWIvbW9ja0FQSS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHlEQUF5RDtBQUNsRCxNQUFNQSxjQUFjO0lBQ3pCQyxVQUFVLE9BQU9DO1FBQ2YsMEJBQTBCO1FBQzFCLE1BQU0sSUFBSUMsUUFBUUMsQ0FBQUEsVUFBV0MsV0FBV0QsU0FBUztRQUVqRCxzQkFBc0I7UUFDdEIsSUFBSSxDQUFDRixLQUFLSSxLQUFLLElBQUksQ0FBQ0osS0FBS0ssUUFBUSxFQUFFO1lBQ2pDLE1BQU0sSUFBSUMsTUFBTTtRQUNsQjtRQUVBLElBQUlOLEtBQUtLLFFBQVEsQ0FBQ0UsTUFBTSxHQUFHLEdBQUc7WUFDNUIsTUFBTSxJQUFJRCxNQUFNO1FBQ2xCO1FBRUEsbUNBQW1DO1FBQ25DLE1BQU1FLFdBQVc7WUFDZkMsSUFBSUMsS0FBS0MsR0FBRztZQUNaQyxXQUFXWixLQUFLWSxTQUFTO1lBQ3pCQyxVQUFVYixLQUFLYSxRQUFRO1lBQ3ZCVCxPQUFPSixLQUFLSSxLQUFLO1lBQ2pCVSxNQUFNZCxLQUFLYyxJQUFJLElBQUk7WUFDbkJDLFlBQVk7WUFDWkMsV0FBVyxJQUFJTixPQUFPTyxXQUFXO1FBQ25DO1FBRUEsTUFBTUMsYUFBYTtZQUNqQkMsYUFBYSx1QkFBdUJULEtBQUtDLEdBQUc7WUFDNUNTLGNBQWMsd0JBQXdCVixLQUFLQyxHQUFHO1FBQ2hEO1FBRUEsT0FBTztZQUNMWCxNQUFNO2dCQUNKcUIsU0FBUztnQkFDVHJCLE1BQU07b0JBQ0pzQixNQUFNZDtvQkFDTixHQUFHVSxVQUFVO2dCQUNmO1lBQ0Y7UUFDRjtJQUNGO0lBRUFLLE9BQU8sT0FBT0M7UUFDWixNQUFNLElBQUl2QixRQUFRQyxDQUFBQSxVQUFXQyxXQUFXRCxTQUFTO1FBRWpELElBQUlzQixZQUFZcEIsS0FBSyxLQUFLLHNCQUFzQm9CLFlBQVluQixRQUFRLEtBQUssZUFBZTtZQUN0RixPQUFPO2dCQUNMTCxNQUFNO29CQUNKcUIsU0FBUztvQkFDVHJCLE1BQU07d0JBQ0pzQixNQUFNOzRCQUNKYixJQUFJOzRCQUNKRyxXQUFXOzRCQUNYQyxVQUFVOzRCQUNWVCxPQUFPOzRCQUNQVSxNQUFNOzRCQUNOQyxZQUFZO3dCQUNkO3dCQUNBSSxhQUFhO3dCQUNiQyxjQUFjO29CQUNoQjtnQkFDRjtZQUNGO1FBQ0YsT0FBTztZQUNMLE1BQU07Z0JBQ0pLLFVBQVU7b0JBQ1JDLFFBQVE7b0JBQ1IxQixNQUFNO3dCQUFFMkIsU0FBUztvQkFBc0I7Z0JBQ3pDO1lBQ0Y7UUFDRjtJQUNGO0lBRUFDLGdCQUFnQjtRQUNkLE1BQU0sSUFBSTNCLFFBQVFDLENBQUFBLFVBQVdDLFdBQVdELFNBQVM7UUFDakQsT0FBTztZQUNMRixNQUFNO2dCQUNKcUIsU0FBUztnQkFDVHJCLE1BQU07b0JBQ0pzQixNQUFNO3dCQUNKYixJQUFJO3dCQUNKRyxXQUFXO3dCQUNYQyxVQUFVO3dCQUNWVCxPQUFPO3dCQUNQVSxNQUFNO3dCQUNOQyxZQUFZO29CQUNkO2dCQUNGO1lBQ0Y7UUFDRjtJQUNGO0FBQ0YsRUFBRTtBQUVGLGdDQUFnQztBQUN6QixNQUFNYywyQkFBMkI7SUFDdEMsSUFBSTtRQUNGLE1BQU1KLFdBQVcsTUFBTUssTUFBTSxvQ0FBb0M7WUFDL0RDLFFBQVE7WUFDUkMsU0FBUztRQUNYO1FBQ0EsT0FBT1AsU0FBU1EsRUFBRTtJQUNwQixFQUFFLE9BQU9DLE9BQU87UUFDZCxPQUFPO0lBQ1Q7QUFDRixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2xpYi9tb2NrQVBJLmpzP2NlMmMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTW9jayBBUEkgZm9yIGRldmVsb3BtZW50IHdoZW4gYmFja2VuZCBpcyBub3QgYXZhaWxhYmxlXHJcbmV4cG9ydCBjb25zdCBtb2NrQXV0aEFQSSA9IHtcclxuICByZWdpc3RlcjogYXN5bmMgKGRhdGEpID0+IHtcclxuICAgIC8vIFNpbXVsYXRlIEFQSSBjYWxsIGRlbGF5XHJcbiAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTAwMCkpO1xyXG4gICAgXHJcbiAgICAvLyBTaW11bGF0ZSB2YWxpZGF0aW9uXHJcbiAgICBpZiAoIWRhdGEuZW1haWwgfHwgIWRhdGEucGFzc3dvcmQpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFbWFpbCBhbmQgcGFzc3dvcmQgYXJlIHJlcXVpcmVkJyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmIChkYXRhLnBhc3N3b3JkLmxlbmd0aCA8IDgpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdQYXNzd29yZCBtdXN0IGJlIGF0IGxlYXN0IDggY2hhcmFjdGVycycpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBTaW11bGF0ZSBzdWNjZXNzZnVsIHJlZ2lzdHJhdGlvblxyXG4gICAgY29uc3QgbW9ja1VzZXIgPSB7XHJcbiAgICAgIGlkOiBEYXRlLm5vdygpLFxyXG4gICAgICBmaXJzdE5hbWU6IGRhdGEuZmlyc3ROYW1lLFxyXG4gICAgICBsYXN0TmFtZTogZGF0YS5sYXN0TmFtZSxcclxuICAgICAgZW1haWw6IGRhdGEuZW1haWwsXHJcbiAgICAgIHJvbGU6IGRhdGEucm9sZSB8fCAndXNlcicsXHJcbiAgICAgIGlzVmVyaWZpZWQ6IGZhbHNlLFxyXG4gICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgY29uc3QgbW9ja1Rva2VucyA9IHtcclxuICAgICAgYWNjZXNzVG9rZW46ICdtb2NrX2FjY2Vzc190b2tlbl8nICsgRGF0ZS5ub3coKSxcclxuICAgICAgcmVmcmVzaFRva2VuOiAnbW9ja19yZWZyZXNoX3Rva2VuXycgKyBEYXRlLm5vdygpXHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBkYXRhOiB7XHJcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICB1c2VyOiBtb2NrVXNlcixcclxuICAgICAgICAgIC4uLm1vY2tUb2tlbnNcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfSxcclxuICBcclxuICBsb2dpbjogYXN5bmMgKGNyZWRlbnRpYWxzKSA9PiB7XHJcbiAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgODAwKSk7XHJcbiAgICBcclxuICAgIGlmIChjcmVkZW50aWFscy5lbWFpbCA9PT0gJ3Rlc3RAZXhhbXBsZS5jb20nICYmIGNyZWRlbnRpYWxzLnBhc3N3b3JkID09PSAncGFzc3dvcmQxMjMnKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgdXNlcjoge1xyXG4gICAgICAgICAgICAgIGlkOiAxLFxyXG4gICAgICAgICAgICAgIGZpcnN0TmFtZTogJ1Rlc3QnLFxyXG4gICAgICAgICAgICAgIGxhc3ROYW1lOiAnVXNlcicsXHJcbiAgICAgICAgICAgICAgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyxcclxuICAgICAgICAgICAgICByb2xlOiAndXNlcicsXHJcbiAgICAgICAgICAgICAgaXNWZXJpZmllZDogdHJ1ZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhY2Nlc3NUb2tlbjogJ21vY2tfYWNjZXNzX3Rva2VuJyxcclxuICAgICAgICAgICAgcmVmcmVzaFRva2VuOiAnbW9ja19yZWZyZXNoX3Rva2VuJ1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRocm93IHtcclxuICAgICAgICByZXNwb25zZToge1xyXG4gICAgICAgICAgc3RhdHVzOiA0MDEsXHJcbiAgICAgICAgICBkYXRhOiB7IG1lc3NhZ2U6ICdJbnZhbGlkIGNyZWRlbnRpYWxzJyB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgXHJcbiAgZ2V0Q3VycmVudFVzZXI6IGFzeW5jICgpID0+IHtcclxuICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAzMDApKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGRhdGE6IHtcclxuICAgICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgIHVzZXI6IHtcclxuICAgICAgICAgICAgaWQ6IDEsXHJcbiAgICAgICAgICAgIGZpcnN0TmFtZTogJ1Rlc3QnLFxyXG4gICAgICAgICAgICBsYXN0TmFtZTogJ1VzZXInLFxyXG4gICAgICAgICAgICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxyXG4gICAgICAgICAgICByb2xlOiAndXNlcicsXHJcbiAgICAgICAgICAgIGlzVmVyaWZpZWQ6IHRydWVcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gQ2hlY2sgaWYgYmFja2VuZCBpcyBhdmFpbGFibGVcclxuZXhwb3J0IGNvbnN0IGNoZWNrQmFja2VuZEF2YWlsYWJpbGl0eSA9IGFzeW5jICgpID0+IHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnaHR0cDovL2xvY2FsaG9zdDo1MDAwL2FwaS9oZWFsdGgnLCB7XHJcbiAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgIHRpbWVvdXQ6IDMwMDBcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJlc3BvbnNlLm9rO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59O1xyXG4iXSwibmFtZXMiOlsibW9ja0F1dGhBUEkiLCJyZWdpc3RlciIsImRhdGEiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJlbWFpbCIsInBhc3N3b3JkIiwiRXJyb3IiLCJsZW5ndGgiLCJtb2NrVXNlciIsImlkIiwiRGF0ZSIsIm5vdyIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwicm9sZSIsImlzVmVyaWZpZWQiLCJjcmVhdGVkQXQiLCJ0b0lTT1N0cmluZyIsIm1vY2tUb2tlbnMiLCJhY2Nlc3NUb2tlbiIsInJlZnJlc2hUb2tlbiIsInN1Y2Nlc3MiLCJ1c2VyIiwibG9naW4iLCJjcmVkZW50aWFscyIsInJlc3BvbnNlIiwic3RhdHVzIiwibWVzc2FnZSIsImdldEN1cnJlbnRVc2VyIiwiY2hlY2tCYWNrZW5kQXZhaWxhYmlsaXR5IiwiZmV0Y2giLCJtZXRob2QiLCJ0aW1lb3V0Iiwib2siLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./lib/mockAPI.js\n"));

/***/ })

});